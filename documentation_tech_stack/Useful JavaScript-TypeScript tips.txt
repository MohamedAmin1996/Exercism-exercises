-------------------------------------------------------
-JavaScript-

inline javascript = <button onclick = 'alert("hello")'> Text for the button </button>
internal javascript = <script> alert("hello") </script> = this get triggered when the web is loaded in.
Note for internal javascript: place the script tag at the bottom of the body tag.
external javascript = a new file where you write js code. you dont need to use script tags.

variables is initialized like this (use the let key word. Feels like combo of Python and C#): let item = "bike";
if you're updating existing variable = item = "train";

you can use the keyword typeof to check the datatype: typeof variableName;

console.log("whatever");
document.getElementById("ID from html");
document.getElementById("ID from html").textContent = 'sometext';
document.createElement("html tag");
getElementVAR.appendChild(createElementVAR);
document.createTextNode();
element.removeChild(element);
page.replaceChild(newnode, oldnode);

document.getElementsByTagName("h1") = gets an array of h1 tags that are children to document.
document.getElementsByClassName("expert") = gets an array of "experts" tags that are children to document.

prompt("Fill text here") = input function
confirm() = a new window that checks if you're sure.

Number("Stringed number") = will convert it into a number
String("number") = will convert it into a string

setInterval(rotate, 500); = 500 is in millisecounds
clearInterval(variable that has the SetInterval);

custom functions looks like this:

function someName(){
}

When it comes to comparison operators, its the same as in unreal engine blueprint 
where == is not as accurate as ===. Same goes for !=, use !== instead.

event handlers look like this:

element.addEventListener("click", action);
element.removeEventListener("click", action);
element.onClick = function(){ functionName() }

-Events-

Mouse Events

click → mouse button clicked

dblclick → double click

mousedown → mouse button pressed

mouseup → mouse button released

mouseenter / mouseleave → when mouse enters or leaves an element

mouseover / mouseout → similar to above, bubbles

mousemove → mouse moves over element


Keyboard Events

keydown → key pressed

keyup → key released

keypress → key pressed (deprecated, mostly use keydown)


Form Events

submit → form submitted

change → input value changed

input → input value changes while typing

focus → input gets focus

blur → input loses focus


Window/Document Events

load → page fully loaded

resize → window resized

scroll → user scrolls

unload → page is unloading


Clipboard Events

copy, cut, paste


Drag & Drop Events

drag, dragstart, dragend, dragover, drop


Pointer Events (touch and mouse unified)

pointerdown, pointerup, pointermove, pointerover, pointerout

function someFunction(event){
	event.target.style.color = "blue";
	event.target.addEventListener('click', someFunction);
}

Arrays are created like this:

const variableName = [0, 1, 2];
variableName[1] = thats how you get it
variableName.length

-------------------------------------------------------
-To comment in javaScript-

// just like in C#

-------------------------------------------------------
--------------------------------------------------------------------------------------------------------------
-------------------------------------------------------
-TypeScript-

TypeScript code cannot run in the browser directly.
You compile .ts to .js, then the browser runs the JS output.
To do it you open the terminal on the same file path and type:
tsc filename.ts
node filename.js

In the compiler create a typescript configure file. This handles how to convert from ts files to js files: tsc --init
Note: create this in the project folder. on the target, select CTRL + space to select which compiler version.
Note: outDir is where you specify where you want the generated js file to be. rootDir should be the folder where the ts files are.
Note: removeComments option is good. it means that the generated js files does not have comments.
Note: activate noEmitOnError. It means that if there is a bug in the ts code, it cannot be generated into a js code.

export {}; // use this at the beginning of the file so that the variable is within the same file. Or typescript 
will think that the variables are global

let item: string = "bike";
const item: string = "bike";

interface User {
  name: string;
  age: number;
}
const user: User = { name: "Alice", age: 25 };

Function expression (LEGACY BUT WORKS): const variableName = function(parameter1: datatype, parameter2: datatype) {
  // function body
};

Arrow function (MODERN AND PREFERRED): const variableName = (parameter1:datatype, parameter2:datatype) => { 
  // function body (NOTE: No ; at the end) 
}

string interpolation: `hello ${amin}` 

Arrays: export const COLORS = [
      'black',
      'brown',
      'red',
      'orange',
      'yellow',
      'green',
      'blue',
      'violet',
      'grey',
      'white',
]

in the parameter if you want to use array inside paratathese: [color1, color2, multiplier]: string[]

KeyValue Map: const colorCodes: { [key: string]: number } = {
  black: 0,
  brown: 1,
  red: 2,
  orange: 3,
  yellow: 4,
  green: 5,
  blue: 6,
  violet: 7,
  grey: 8,
  white: 9
};

in the parameter if you want to use Keyvalue pair inside paratathese: pair: { [key: string]: number }


if you're working with decimals and want to use .00 then: Number(age.toFixed(2))
Note: toFixed is a string that returns the decimals after point. Wrap it with Number to convert 
it back into a number.
-------------------------------------------------------